{"version":3,"sources":["components/RideListItem.js","components/RideList.js","containers/App.js","serviceWorker.js","index.js"],"names":["RideListItem","link","from","to","date","time","class","href","target","RideList","list","listType","out","map","item","i","key","heading","className","App","props","state","urlBase","url","rideList","handleClick","bind","e","this","setState","getAttribute","fetchList","fetch","resp","json","data","results","list-type","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTAceA,G,MAZM,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC1C,OACI,yBAAKC,MAAM,QACP,uBAAGC,KAAMN,EAAMO,OAAO,UAAtB,oBACA,yBAAKF,MAAM,OAAX,SAAwBJ,GACxB,yBAAKI,MAAM,OAAX,OAAsBH,GACtB,yBAAKG,MAAM,QAAQF,GACnB,yBAAKE,MAAM,QAAQD,MCkBhBI,MAtBf,YAAuC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SAChBC,EAAMF,EAAKG,KAAI,SAACC,EAAMC,GACxB,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLd,KAAMS,EAAKK,GAAGd,KACdC,KAAMQ,EAAKK,GAAGb,KACdC,GAAIO,EAAKK,GAAGZ,GACZC,KAAMM,EAAKK,GAAGX,KACdC,KAAMK,EAAKK,GAAGV,UAIpBY,EAAuB,YAAbN,EAAyB,iCAAmC,iCAC5E,OACI,yBAAKO,UAAU,+EACX,4BAAKD,EAAL,KACCL,ICyCEO,E,kDA1Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,iCACTC,IAAK,wCACLZ,SAAU,UACVa,SAAU,IAEZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARF,E,iGAWDC,G,iFACVC,KAAKC,SAAS,CAAElB,SAAUgB,EAAEnB,OAAOsB,aAAa,e,OACtDF,KAAKG,Y,2QAICH,KAAKC,SAAS,CAAEN,IAAKK,KAAKP,MAAMC,QAAUM,KAAKP,MAAMV,SAAW,M,uBACrDqB,MAAMJ,KAAKP,MAAME,K,cAA9BU,E,gBACaA,EAAKC,O,OAAlBC,E,OACJP,KAAKC,SAAS,CAAEL,SAAUW,EAAKC,U,gJAI/BR,KAAKG,c,+BAIL,OACE,4BAAQb,UAAU,cAChB,wBAAIA,UAAU,MAAd,yBACA,yBAAKA,UAAU,kFACb,wBAAIA,UAAU,MAAd,qBACA,yBACEA,UAAW,4CAAsE,YAAxBU,KAAKP,MAAMV,SAAyB,SAAW,IACxG0B,YAAU,UACVC,QAASV,KAAKH,aAHhB,UAOA,wBAAIP,UAAU,UAAd,MACA,yBACEA,UAAW,+CAAyE,eAAxBU,KAAKP,MAAMV,SAA4B,SAAW,IAC9G0B,YAAU,aACVC,QAASV,KAAKH,aAHhB,eAQF,kBAAC,EAAD,CACEf,KAAMkB,KAAKP,MAAMG,SACjBb,SAAUiB,KAAKP,MAAMV,gB,GApDb4B,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc2541fd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst RideListItem = ({ link, from, to, date, time }) => {\r\n    return (\r\n        <div class=\"item\">\r\n            <a href={link} target=\"_blank\">More Information</a>\r\n            <div class=\"loc\">From: {from}</div>\r\n            <div class=\"loc\">To: {to}</div>\r\n            <div class=\"date\">{date}</div>\r\n            <div class=\"time\">{time}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RideListItem;","import React from 'react';\r\nimport RideListItem from './RideListItem'\r\n\r\n\r\n\r\nfunction RideList({ list, listType }) {\r\n    const out = list.map((item, i) => {\r\n        return (\r\n            <RideListItem\r\n                key={i}\r\n                link={list[i].link}\r\n                from={list[i].from}\r\n                to={list[i].to}\r\n                date={list[i].date}\r\n                time={list[i].time}\r\n            />\r\n        )\r\n    })\r\n    const heading = listType === 'drivers' ? 'Drivers looking for passengers' : 'Passengers looking for drivers';\r\n    return (\r\n        <div className=\"ride-list-wrapper bt mt5 flex flex-column w-100 justify-center items-center\" >\r\n            <h3>{heading}:</h3>\r\n            {out}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RideList;","import React from 'react';\r\nimport './App.css';\r\nimport RideList from '../components/RideList'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      urlBase: 'http://apis.is/rides/samferda-',\r\n      url: 'http://apis.is/rides/samferda-drivers',\r\n      listType: 'drivers',\r\n      rideList: []\r\n    }\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  async handleClick(e) {\r\n    await this.setState({ listType: e.target.getAttribute('list-type') });\r\n    this.fetchList();\r\n  }\r\n\r\n  async fetchList() {\r\n    await this.setState({ url: this.state.urlBase + this.state.listType + '/' });\r\n    let resp = await fetch(this.state.url);\r\n    let data = await resp.json();\r\n    this.setState({ rideList: data.results })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchList()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"App-header\" >\r\n        <h1 className=\"f1\">Carpooling in Iceland</h1>\r\n        <div className=\"ride-type-selection-wrapper flex flex-column w-100 justify-center items-center\">\r\n          <h2 className=\"f2\">I am looking for:</h2>\r\n          <div\r\n            className={\"btn f3 pa3 ba bw2 br4 br--top w-100 mw6 \" + (this.state.listType === 'drivers' ? 'active' : '')}\r\n            list-type='drivers'\r\n            onClick={this.handleClick}\r\n          >\r\n            A Ride\r\n            </div>\r\n          <h2 className=\"f2 ma3\">or</h2>\r\n          <div\r\n            className={\"btn f3 pa3 ba bw2 br4 br--bottom w-100 mw6 \" + (this.state.listType === 'passengers' ? 'active' : '')}\r\n            list-type='passengers'\r\n            onClick={this.handleClick}\r\n          >\r\n            Passengers\r\n            </div>\r\n        </div>\r\n        <RideList\r\n          list={this.state.rideList}\r\n          listType={this.state.listType}\r\n        />\r\n      </header >\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}